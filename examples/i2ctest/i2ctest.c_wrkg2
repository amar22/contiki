/*
 * Copyright (c) 2006, Swedish Institute of Computer Science.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This file is part of the Contiki operating system.
 *
 */

/**
 * \file
 *         A very simple Contiki application showing how pwm works
 * \author
 *         Manoj Sony <manojsony@gmail.com>
 */

#include "contiki.h"
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h> /* For printf() */
#include "hw_ints.h"
#include "hw_memmap.h"
#include "gpio.h"
#include "interrupt.h"
#include "ioc.h"
#include "sys-ctrl.h"
#include "gptimer.h"
#include "cpu.h"
//#include "sleep.h"
//#include "uartstdio.h"

#define LED_RELAY_PIN 2     /* Relay Pin */
#define PORT_D GPIO_D_BASE

// found in #include "sys-ctrl_a.h"
#define SYS_CTRL_PERIPH_GPT0       0x00000000  // General Purpose Timer 0
//


#define SYS_CTRL_SYSDIV_32MHZ SYS_CTRL_CLOCK_CTRL_SYS_DIV_32MHZ
/*---------------------------------------------------------------------------*/
PROCESS(hello_world_process, "Hello world process");
AUTOSTART_PROCESSES(&hello_world_process);
/*---------------------------------------------------------------------------*/

unsigned int pwmDutyCycle = 0x0000;
unsigned int ulperiod = 0;
int delayIndex = 0;

PROCESS_THREAD(hello_world_process, ev, data)
{
  
  PROCESS_BEGIN();

    // Display the example setup on the console.
    //
    printf(" \n16-Bit PWM timer ->\n\r");
    printf(" Timer = Timer0A\n\r");
    printf(" Mode = PWM\n\r");
    

    SysCtrlIOClockSet( SysCtrlClockGet());    
    //
    // The Timer0 peripheral must be enabled for use.
    //
    SysCtrlPeripheralEnable(SYS_CTRL_PERIPH_GPT0);    
    // Configure GPTimer0A as a 16-bit PWM Timer.
   // GPIOPinTypeTimer(GPIO_A_BASE, GPIO_PIN_5);
   // IOCPadConfigSet(GPIO_A_BASE, GPIO_PIN_5, IOC_OVERRIDE_OE);
  /*TimerConfigure(GPTIMER0_BASE, GPTIMER_CFG_SPLIT_PAIR |

                   GPTIMER_CFG_A_PWM | GPTIMER_CFG_B_PWM);  */
TimerConfigure(GPTIMER0_BASE, GPTIMER_CFG_SPLIT_PAIR | GPTIMER_CFG_B_PWM );

    // Set the GPTimer0A load value to 1sec by setting the timer load value

    // to SYSCLOCK / 255. This is determined by:

    //      Prescaled clock = 16Mhz / 255

    //      Cycles to wait = 1sec * Prescaled clock

     
    printf("%d  is the clock \n", SysCtrlClockGet());   

    TimerControlLevel(GPTIMER0_BASE, GPTIMER_B, false);
    ulperiod= (SysCtrlClockGet() / 2000);
    TimerLoadSet(GPTIMER0_BASE, GPTIMER_B, ulperiod);
    //pwmDutyCycle = (ulperiod - 1)*0.4;
    pwmDutyCycle = SysCtrlClockGet() / 4000;
    printf(" %d : Timerloadget rxed,  %d : ulperiodval  %d : pwmDutyCycle \n",TimerLoadGet(GPTIMER0_BASE, GPTIMER_B),ulperiod, pwmDutyCycle);
    TimerMatchSet(GPTIMER0_BASE, GPTIMER_B,pwmDutyCycle );

 // Enable GPTimer0B

    TimerEnable(GPTIMER0_BASE, GPTIMER_B); 

  /*     TimerControlLevel(GPTIMER0_BASE, GPTIMER_A, true);
    ulperiod=100;
    TimerLoadSet(GPTIMER0_BASE, GPTIMER_A, ulperiod);
    pwmDutyCycle = 50;
    TimerMatchSet(GPTIMER0_BASE, GPTIMER_A, pwmDutyCycle);*/
  
           // Tell timer to use GPIOPortA.0

    // Does Direction Selection and PAD Selection


    
      // Loop forever while the Timer0A runs.

    // Enable processor interrupts.

    //

    IntMasterEnable();    

    //

      

    while(1)

    {
/*     
      //TimerLoadSet(GPTIMER0_BASE, GPTIMER_A, SysCtrlClockGet() ); 
      for (delayIndex = 0; delayIndex < 100000; delayIndex++);
 //     for (delayIndex = 0; delayIndex < 100000; delayIndex++);
 //     for (delayIndex = 0; delayIndex < 100000; delayIndex++);
 //     for (delayIndex = 0; delayIndex < 100000; delayIndex++);
 //     for (delayIndex = 0; delayIndex < 100000; delayIndex++);
 //     for (delayIndex = 0; delayIndex < 100000; delayIndex++);
      //TimerLoadSet(GPTIMER0_BASE, GPTIMER_A, SysCtrlClockGet()/8000); 

      pwmDutyCycle += 0x0F;

      pwmDutyCycle &= 0xFFFF;
    

      TimerMatchSet(GPTIMER0_BASE, GPTIMER_B, pwmDutyCycle);

      printf("PWM DC Value: %04X -  timer value- %04X -  Duty Cycle- %04X\n\r",

                      pwmDutyCycle,

                      TimerValueGet(GPTIMER0_BASE, GPTIMER_A),

                      TimerMatchGet(GPTIMER0_BASE, GPTIMER_A) ); */
   } // end of while
    


 
  PROCESS_END();
}
/*---------------------------------------------------------------------------*/
